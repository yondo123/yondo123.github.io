<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on Jiny</title>
    <link>https://jinyisland.kr/tags/react/</link>
    <description>Recent content in react on Jiny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Jun 2023 02:09:54 +0900</lastBuildDate><atom:link href="https://jinyisland.kr/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React는 왜 선언형 프로그래밍을 지향할까?</title>
      <link>https://jinyisland.kr/post/react-with-declarative/</link>
      <pubDate>Wed, 21 Jun 2023 02:09:54 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/react-with-declarative/</guid>
      <description>개요  Declarative React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.
 React에서는 React를 선언적이라고 잘 설명하고 있습니다. &amp;ldquo;선언형 뷰는 코드를 예측 가능하고, 디버깅을 쉽게 만든다&amp;rdquo; 라고 설명하고 있으며, React가 선언형 프로그래밍의 패러다임을 지향하는 이유와 특징에 대해서 알아보았습니다.
명령형 프로그래밍 선언형 프로그래밍을 알기 위해 기존 명령형 프로그래밍의 특징을 간략하게 알아보겠습니다.</description>
    </item>
    
    <item>
      <title>[React] React에서 우아하게 비동기 처리하기</title>
      <link>https://jinyisland.kr/post/react-awesome-fetching/</link>
      <pubDate>Sun, 30 Apr 2023 23:13:01 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/react-awesome-fetching/</guid>
      <description>들어가면서 이 글은 Toss팀의 &amp;ldquo;프론트엔드 웹 서비스에서 우아하게 비동기 처리하기&amp;rdquo; 세션을 시청하고 실제로 적용해보면서 정리한 글입니다. 비동기 처리에 대한 전략을 제시해주는 좋은 영상인 것 같습니다. 꼭 시청해보시길 권장드립니다. 😀
비동기에서의 좋은 코드 비동기에서의 복잡도 만약 처리해야 할 비동기 함수가 M개이고, 각각의 비동기 함수는 N개의 상태를 가진다면, 확인해야 할 경우의 수가 많아집니다.
비동기에서의 좋은 코드란?  함수의 역할을 쉽게 파악할 수 있는 간결한 코드 비동기의 상태를 사용하는 입장에서 신경쓰지 않아도 되는 코드  Promsie</description>
    </item>
    
    <item>
      <title>[React] Ref의 개념과 useImperativeHandle, Uncontrolled form</title>
      <link>https://jinyisland.kr/post/react-ref/</link>
      <pubDate>Tue, 28 Feb 2023 23:51:31 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/react-ref/</guid>
      <description>Ref  ref는 render 메서드에서 생성된 DOM 노드나 React 엘리먼트에 접근하는 방법을 제공합니다.
  포커스, 텍스트 선택, 혹은 미디어의 재생을 관리할 때 애니메이션을 직접적으로 실행시킬 때 React와 같이 서드 파티 DOM 라이브러리를 사용할 때  순수 자바스크립트에서는 UI를 변경하기 위해 DOM API를 사용하여 DOM에 직접적으로 접근하였습니다. React에서는 이러한 방식을 지양하고, ref 객체를 생성하여 접근하도록 권고합니다.
DOM API를 이용하여 접근하기 DOM에 접근하기 위해서는 기존의 DOM API를 사용할 수 있습니다.
import React from &amp;#39;react&amp;#39;; const Component = () =&amp;gt; { const hadleClick = () =&amp;gt; { document.</description>
    </item>
    
    <item>
      <title>[React] 리액트 라우터 기본 사용방법</title>
      <link>https://jinyisland.kr/post/react-router/</link>
      <pubDate>Wed, 22 Jun 2022 23:23:52 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/react-router/</guid>
      <description>페이지 라우팅 vue를 처음 접했을 때 이해했던 개념이지만, 한번 더 정리하자면 일단 라우터라는 개념은 네트워크 상에서 통신 데이터를 보낼 경로를 선택하는 과정을 의미한다. SPA 환경의 웹 애플리케이션(Vue, React, Angular)에서는 말 그대로 요청(Request)에 따라 알맞은 페이지를 반환해주는 과정 자체로 이해하면 된다.
SPA의 단일 페이지라는 이점을 살려, MPA(Multi Page Application) 환경과는 달리 페이지자체를 반환하지 않고 데이터만 불러와 렌더링해주기 때문에 사용자 입장에서 훨씬 빠르다고 느낄 수 있다. 또한 클라이언트에서 렌더링을 다루기때문에 CSR(Client Side Rendering)이라고도 불린다.</description>
    </item>
    
    <item>
      <title>[React] 컴포넌트에 Props 전달하기</title>
      <link>https://jinyisland.kr/post/react-props/</link>
      <pubDate>Mon, 13 Jun 2022 23:54:07 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/react-props/</guid>
      <description>개념 컴포넌트에 데이터를 전달하는 데이터를 prop이라고 한다. (Properties의 줄임말)
Props 단일 값 전달하기 컴포넌트 작성 시 해당 컴포넌트 태그에 변수이름={}으로 사용한다.
//App.js (최상위 컴포너트) const today = function () { return new Date().toISOString(); }; function App() { return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; &amp;lt;AppHeader /&amp;gt; &amp;lt;header className=&amp;#34;App-header&amp;#34;&amp;gt; &amp;lt;h2&amp;gt;{myName}&amp;lt;/h2&amp;gt; &amp;lt;Time init={today} /&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;AppFooter /&amp;gt; &amp;lt;/div&amp;gt; ); } 전달받는 컴포넌트 (자식 컴포넌트)에서는 매개변수로 받아올 수 있는데 객체 타입으로 전달 받는다.
function Time(props) { return ( &amp;lt;div&amp;gt; &amp;lt;h2&amp;gt;What Time?</description>
    </item>
    
    <item>
      <title>[React] jsx 사용방법</title>
      <link>https://jinyisland.kr/post/jsx/</link>
      <pubDate>Mon, 02 May 2022 23:12:10 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/jsx/</guid>
      <description>JSX JavaScript Extension, 자바스립트를 확장한 문법이다.(HTML이 아니다.) 리액트에서 컴포넌트 구조를 작성하면서 HtML 대신 jsx로 UI를 표현한다고 생각하면 된다. vue에서는 template태그에 직접 HTML 문법을 사용했었는데 동일한 역할이다. 확장자는 jsx로 사용할 수 있으나 js로 사용해도 자동 변환이 되기 때문에 어느 것으로 해도 큰 상관은 없다.
기본 문법 스타일 적용하기 className
jsx에서는 스타일을 적용하기 위한 class는 자바스크립트 예약어라 className으로 대체한다.
const AppFooter = () =&amp;gt; { return &amp;lt;footer className=&amp;#34;red&amp;#34;&amp;gt;Footer&amp;lt;/footer&amp;gt;; }; InlineStyle
기존 방식대로 클래스나 id를 붙여 css를 적용하는 방법 외에도, 스크립트 자체에서 스타일을 적용시킬 수 있다.</description>
    </item>
    
  </channel>
</rss>
