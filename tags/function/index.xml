<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>function on Jiny Island</title>
    <link>https://jinyisland.kr/tags/function/</link>
    <description>Recent content in function on Jiny Island</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Sep 2021 19:45:01 +0900</lastBuildDate><atom:link href="https://jinyisland.kr/tags/function/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>자바스크립트 화살표 함수</title>
      <link>https://jinyisland.kr/post/arrow-function/</link>
      <pubDate>Sun, 05 Sep 2021 19:45:01 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/arrow-function/</guid>
      <description>화살표 함수 기존 함수 표기법을 화살표(⇒)형태로 간단하게 표기하는 함수 표기법
기존 함수 표현식과의 차이 //기존 함수 표현식 function name(){ //code.. } //화살표 함수 () =&amp;gt; { //code.. } 화살표 함수 특징 괄호 생략 매개변수가 1개라면 괄호()도 생략이 가능하다.
const logMessage = message =&amp;gt; { console.log(message) } logMessage(&amp;#39;hello&amp;#39;); //&amp;#39;hello&amp;#39; Lexical this 일반 함수 표기에서는 this사용 시 동적으로 해당 함수를 실행한 객체로 바인딩되었다.
하지만 화살표 함수에서는 자신을 소유하고 있는 객체로 바인딩되는게 아니라 해당 화살표함수를 소유하고 있는 상위 환경의 this를 그대로 계승한다.</description>
    </item>
    
    <item>
      <title>자바스크립트 함수, 이것만은 꼭 기억하자</title>
      <link>https://jinyisland.kr/post/js-function/</link>
      <pubDate>Wed, 04 Aug 2021 23:34:14 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/js-function/</guid>
      <description>함수 자바스크립트의 함수는 객체로 취급 받는다. (일급객체)
따라서 객체처럼 리터럴 방식으로 선언할 수 있고, new 연산자로 선언할 수도 있다. (대부분.. 리터럴 방식을 선호한다.)
//new 연산자 선언 var sum = new Function(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;return a+b&amp;#39;); sum(1,3) //4 익명함수와 선언함수 익명 함수는 말 그대로 &amp;lsquo;이름을 갖지 않는&amp;rsquo; 함수이다.
보통 변수에 저장해서 선언 후 호출한다.
add(2,3) //result : type error  var add = function(x,y){ //익명함수 	return x+y; } add(3,7); //result : 10 선언 함수는 함수 선언 시 이름을 지명한다.</description>
    </item>
    
  </channel>
</rss>
