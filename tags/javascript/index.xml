<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Jiny Island</title>
    <link>https://jinyisland.kr/tags/javascript/</link>
    <description>Recent content in javascript on Jiny Island</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Aug 2021 23:39:26 +0900</lastBuildDate><atom:link href="https://jinyisland.kr/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>let, const와 기존 var의 차이</title>
      <link>https://jinyisland.kr/post/let-const/</link>
      <pubDate>Mon, 30 Aug 2021 23:39:26 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/let-const/</guid>
      <description>요즘 공부하고 있는 vue.js 프레임워크를 사용하다보면 자연스럽게 es6 이상의 트렌디한 자바스크립트 문법이 눈에 띈다. 🧐
물론 vue 코드를 빠르게 짤 수 있는 스니펫 플러그인에서도 기본적으로 es6+ 문법으로 안내해주기도하고.. vue를 사용해서가 아니라 이렇게 트렌디한~자바스크립트에서는 어떤 문법이 있는지 차례차례 짚고 넘어가고자 한다. (물론 내 기준 현업 또는 개인적으로 많이 쓰는 문법 위주로~ㅎㅎ)
블록범위 먼저 let과 const를 제대로 이해하려면 블록범위를 제대로 알고넘어가야한다!
블록범위 내에서 let과 const를 사용하면 해당 변수를 재할당할 수 없도록 지정할 수 있다.</description>
    </item>
    
    <item>
      <title>자바스크립트 함수, 이것만은 꼭 기억하자</title>
      <link>https://jinyisland.kr/post/js-function/</link>
      <pubDate>Wed, 04 Aug 2021 23:34:14 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/js-function/</guid>
      <description>함수 자바스크립트의 함수는 객체로 취급 받는다. (일급객체)
따라서 객체처럼 리터럴 방식으로 선언할 수 있고, new 연산자로 선언할 수도 있다. (대부분.. 리터럴 방식을 선호한다.)
//new 연산자 선언 var sum = new Function(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;return a+b&amp;#39;); sum(1,3) //4 익명함수와 선언함수 익명 함수는 말 그대로 &amp;lsquo;이름을 갖지 않는&amp;rsquo; 함수이다.
보통 변수에 저장해서 선언 후 호출한다.
add(2,3) //result : type error  var add = function(x,y){ //익명함수 	return x+y; } add(3,7); //result : 10 선언 함수는 함수 선언 시 이름을 지명한다.</description>
    </item>
    
    <item>
      <title>자바스크립트에서의 데이터 타입</title>
      <link>https://jinyisland.kr/post/datatype/</link>
      <pubDate>Tue, 03 Aug 2021 21:38:58 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/datatype/</guid>
      <description>원시타입과 참조타입 자바스크립트에서는 원시타입과 참조타입이 존재한다. 원시타입 그 자체가 값인 데이터 타입을 말한다.
변수에 접근할 때 해당 변수에 저장된 실제 값을 조작한다.
기본 값의 유형을 확인하려면 typeof연산자를 사용해서 확인할 수 있다.
자바스크립트에서는 배열과 객체 모두 object로 취급한다는 사실을 꼭 잊지말자.
const typeNumeric = typeof 1; //number const typeBoolean = typeof true; //boolean const typeString = typeof &amp;#39;hello&amp;#39;; //string const typeFunction = typeof function(){ return;} //function const typeUndefined = typeof undefined; //undefined  const typeObject = typeof {}; //object const typeArray = typeof [&amp;#39;1&amp;#39;]; //object const typeNull = typeof null; //object 참조타입 원시 값과는 달리 해당 객체의 참조에 대해서 작업한다.</description>
    </item>
    
    <item>
      <title>자바스크립트는 어떻게 동작할까?</title>
      <link>https://jinyisland.kr/post/how-js-work/</link>
      <pubDate>Tue, 27 Jul 2021 23:47:42 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/how-js-work/</guid>
      <description>자바스크립트의 특징 나는 주로 자바스크립트를 이용해 개발을하는 것을 좋아한다.
내 기준 가장 자신있는 언어이기도 하고, 배우면서 흥미로움을 느낀 프로그래밍 언어 중 하나였다.
하지만 자바스크립트는 쓰면 쓸수록 헷갈리는 개념도 많고, 처음엔 만만하게 보였지만 깊이 들어갈수록 난해한..언어이기도 하다.. (아직도 어렵다 ㅠㅠ)😵
자바스크립트에 대한 핵심적인 내용을 짚고 넘어가고자 해당 시리즈를 포스팅하기로 마음 먹었다! 첫 번째는 자바스크립트는 어떻게 동작할까?
유연한 언어 자바스크립트에서의 타입 체크는 타 언어보다 굉장히 유연하고 느슨하다. 아래 예시를 보면 보통의 언어 같으면 컴파일 단계에서 들어오지 않은 값에 대해 오류를 내뿜어내지만, 자바스크립트에서는 일단 처리를 한다.</description>
    </item>
    
  </channel>
</rss>
