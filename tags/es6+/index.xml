<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>es6&#43; on Jiny Island</title>
    <link>https://jinyisland.kr/tags/es6&#43;/</link>
    <description>Recent content in es6&#43; on Jiny Island</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Sep 2021 23:18:33 +0900</lastBuildDate><atom:link href="https://jinyisland.kr/tags/es6+/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Promise와 Async/await</title>
      <link>https://jinyisland.kr/post/promise-async-await/</link>
      <pubDate>Wed, 08 Sep 2021 23:18:33 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/promise-async-await/</guid>
      <description>Promise 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  function callbackDelay(sec, callback) { setTimeout(()=&amp;gt;{ callback(&amp;#34;콜백 Delay&amp;gt;&amp;gt;&amp;#34;+new Date().toString()); }, sec * 1000) } callbackDelay(1, (result)=&amp;gt;{ console.log(1, result); callbackDelay(1, (result)=&amp;gt;{ console.log(2, result); callbackDelay(1, (result)=&amp;gt;{ console.log(3, result) }) }) }) /*result 1 콜백 Delay&amp;gt;&amp;gt;Sun Jun 07 2020 18:43:56 GMT+0900 (GMT+09:00) promise.js:26 2 콜백 Delay&amp;gt;&amp;gt;Sun Jun 07 2020 18:43:57 GMT+0900 (GMT+09:00) promise.</description>
    </item>
    
    <item>
      <title>자바스크립트 화살표 함수</title>
      <link>https://jinyisland.kr/post/arrow-function/</link>
      <pubDate>Sun, 05 Sep 2021 19:45:01 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/arrow-function/</guid>
      <description>화살표 함수 기존 함수 표기법을 화살표(⇒)형태로 간단하게 표기하는 함수 표기법
기존 함수 표현식과의 차이 1 2 3 4 5 6 7 8 9  //기존 함수 표현식 function name(){ //code.. } //화살표 함수 () =&amp;gt; { //code.. }   화살표 함수 특징 괄호 생략 매개변수가 1개라면 괄호()도 생략이 가능하다.
1 2  const logMessage = message =&amp;gt; { console.log(message) } logMessage(&amp;#39;hello&amp;#39;); //&amp;#39;hello&amp;#39;   Lexical this 일반 함수 표기에서는 this사용 시 동적으로 해당 함수를 실행한 객체로 바인딩되었다.</description>
    </item>
    
    <item>
      <title>자바스크립트 템플릿리터럴</title>
      <link>https://jinyisland.kr/post/template-literals/</link>
      <pubDate>Sun, 05 Sep 2021 19:36:27 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/template-literals/</guid>
      <description>Temlate literals 기존 문자열 결합 시 연산자(+)를 사용하였는데 백틱(`) 기호를 사용하여 쉽게 결합할 수 있다.
기존 연산자 사용 1 2 3  const fruit = &amp;#39;apple&amp;#39;; const color = &amp;#39;red&amp;#39;; console.log(&amp;#39;My Favorite Fruit is&amp;#39; + fruit + &amp;#39;, color is &amp;#39; + color ); //&amp;#34;My Favorite Fruit isapple, color is red&amp;#34;   템플릿리터럴 사용 1 2 3  const fruit = &amp;#39;apple&amp;#39;; const color = &amp;#39;red&amp;#39;; console.log(`My favorite Fruit is ${fruit}, color is ${color}`);   장점 보통 복잡한 문자열이거나 html 코드등을 직접 스크립트상에서 삽입할 때 쌍따옴표-홀따옴표등과 같이 사용하는 경우에 상당히 복잡했었다.</description>
    </item>
    
    <item>
      <title>let, const와 기존 var의 차이</title>
      <link>https://jinyisland.kr/post/let-const/</link>
      <pubDate>Mon, 30 Aug 2021 23:39:26 +0900</pubDate>
      
      <guid>https://jinyisland.kr/post/let-const/</guid>
      <description>요즘 공부하고 있는 vue.js 프레임워크를 사용하다보면 자연스럽게 es6 이상의 트렌디한 자바스크립트 문법이 눈에 띈다. 🧐
물론 vue 코드를 빠르게 짤 수 있는 스니펫 플러그인에서도 기본적으로 es6+ 문법으로 안내해주기도하고.. vue를 사용해서가 아니라 이렇게 트렌디한~자바스크립트에서는 어떤 문법이 있는지 차례차례 짚고 넘어가고자 한다. (물론 내 기준 현업 또는 개인적으로 많이 쓰는 문법 위주로~ㅎㅎ)
블록범위 먼저 let과 const를 제대로 이해하려면 블록범위를 제대로 알고넘어가야한다!
블록범위 내에서 let과 const를 사용하면 해당 변수를 재할당할 수 없도록 지정할 수 있다.</description>
    </item>
    
  </channel>
</rss>
