[{"content":"Javscript Timer  자바스크립트는 기본적으로 싱글 스레드로 동작한다.  자바스크립트 타이머는 비동기 이벤트 핸들러로 실행중인 핸들러가 없을 경우에만 동작하는 방식이다. (물론 브라우저의 처리 방식에 따라 다를 수 있다.) 즉, FIFO(선입선출) 형태로 메시지 큐에 전달된다음, 실행중인 블록이 없을 때 비로소 실행된다. 만약 이 과정에서, 타이머가 실행되기 전 코드 블록에서 다른 타이머나 지연 함수가 발생한다면, 그 시간만큼 지연된다.    (1) 타이머 생성과 제거  Window에 속한 메소드     Method Description     setTimeout(fn, delay) 일정 시간이 진행되면 전달받은 콜백을 실행시킨다.   clearTimeout(id) 해당 타이머(Timeout)를 취소한다. (단, 실행시키지 않은 상태)   setInterval(fn, delay) clearInterval()되지 않을 때까지, 일정 시간마다 주기적으로 콜백함수를 실행시키는 타이머를 생성한다.   clearInterval(id) 해당 타이머(Interval)를 취소한다. (단, 실행시키지 않은 상태)    (2) 싱글 스레드로 인한 타이머 지연  아래 코드를 보면, 3초뒤에 first 메시지를 담은 로그가 출력되길 예상했지만, 결과는 상반되게 명령문을 먼저 실행하고, 이후에 비로소 setTimeout() 코드가 실행된다. 이는, 인터페이스 이벤트나 타이머 같은 비동기 이벤트 처리용 핸들러들이 실행중인 핸들러가 없을 경우에만 실행된다는 특성 때문에 벌어지는 현상이다.  이러한 현상은 HTML5에서 정의된 웹워커 방식으로 해결할 수는 있다.    setTimeout(function name() { console.log(\u0026#39;first \u0026#39;+new Date().toUTCString()) }, 3000); for (let index = 0; index \u0026lt; 10; index++) { setTimeout(function () { console.log(\u0026#39;dump message\u0026#39;); }, 1000); } //result dump message dump message dump message dump message dump message dump message dump message dump message dump message dump message first Sat, 27 Jun 2020 09:11:42 GMT (3)타임아웃과 인터벌의 차이점  타이머 메소드에는 timeout과 interval 메소드가 있는데 둘 차이라면, 일정 시간마다 주기적으로 콜백을 실행하느냐 마냐의 차이이다. 물론, timeout만으로도 interval기능을 구현할 수 있다. (재귀방식)  setTimeout(funtion callback()(){ //code  setTimeout(callback(), 1000); }, 1000);  로직만 보았을때는 인터벌과 큰 차이는 없을 것 같지만, 지연 시간에서 차이가 발생한다. setTimeout()은 마지막 콜백의 실행과 상관없이 무조건 delay시간 후에 콜백을 실행하려고 시도할 것이다, \u0026ldquo;자바스크립트 타이머는 정확한 시간을 보장하지 않는다\u0026rdquo; 라는 것을 기억하자. 즉 interval()은 매 (delay)ms마다 발생하는 것이고, timeout()은 실행 후 (delay)ms으로 콜백을 예약하는 것이다. 지연된 시간만큼 시간 오차는 더욱 늘게 될 것이다.  그냥 마음편히 setInterval()을 사용하자 ㅎㅎ    (4) 정리  자바스크립트 엔진은 싱글 스레드로 작동한다. 비동기 핸들러들은 실행을 기다리며 Queue에 저장한다. (실행 가능할 때까지 대기) setTimeout()과 setInterval()은 이벤트 발생 빈도를 결정하는 방식에 근본적으로 차이가 있다.  참고자료  자바스크립트 닌자 비급 (John Resig 저)\n ","date":"2021-01-05T22:50:16+09:00","permalink":"https://yondo123.github.io/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%83%80%EC%9D%B4%EB%A8%B8/","title":"자바스크립트 타이머"},{"content":"스크롤 이벤트  마우스를 움직이면 스크롤 이벤트가 발생한다. x-value 는 마우스의 가로축, y-value는 문서의 세로축을 따른는 픽셀 window.scroll(x-value, y-value); window.scroll(options);   (1)문서의 상.하단으로 이동시키기  scrollTop() 메서드를 이용한다. $(\u0026#34;body\u0026#34;).scrollTop(0); //간혹 \u0026#39;body\u0026#39;가 먹히지 않는다면 전체 위임 $(\u0026#39;html, body\u0026#39;).scrollTop(0); //순수 자바스크립트 function goTop(){ document.documentElement.scrollTop = 0; }   (2) 새로고침시 스크롤 상단으로 이동하기 setTimeout(function () { scrollTop(0, 0); }, 100); (3) 무한 스크롤링 구현 $(document).ready(function () { for (var i = 0; i \u0026lt; 20; i++) { $(\u0026#39;\u0026lt;h1\u0026gt;Sample TextLine \u0026gt;\u0026gt; \u0026#39; + i + \u0026#39;\u0026lt;/h1\u0026gt;\u0026#39;).appendTo(\u0026#39;body\u0026#39;); } var callback = function () { return $(\u0026#34;\u0026lt;h1\u0026gt;Scroll Detect! create Text Line!!\u0026lt;/h1\u0026gt;\u0026#34;).appendTo(\u0026#39;body\u0026#39;); } $(window).scroll(function () { var scrollHeight = $(window).scrollTop() + $(window).height(); var documentHeight = $(document).height(); if (scrollHeight == documentHeight) { //스크롤 높이와 문서의 높이가 같을 때  callback(); } }); }); ","date":"2021-01-05T22:43:29+09:00","permalink":"https://yondo123.github.io/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%9D%B4%EB%B2%A4%ED%8A%B8/","title":"자바스크립트 스크롤 이벤트"},{"content":"실행 컨텍스트  실행 컨텍스트란 자바스크립트 내에서 실행 가능한 코드블록들이 실행되는 환경이라고 볼 수 있다. console.log(\u0026#39;global Context\u0026#39;); //전역 컨텍스트 function executeContext1(){ console.log(\u0026#39;context 1\u0026#39;); } function executeContext2(){ executeContext1() //context1 함수를 호출  console.log(\u0026#39;context 2\u0026#39;); } executeContext2(); //함수 단위로 실행되므로 context2를 먼저 실행  /*result globacl Context context 1 context 2 */   (1)함수 실행시 컨텍스트 생성 과정 function execute(param1, param2){ var a=1, b=2; function internalFunc(){ return a+b; } return internalFunc() + a, b; } execute(3,4);   활성 객체 생성\n 해당 컨텍스트에서 필요한정보를 담을 객체(매개변수, 사용자 정의 변수 및 객체)    arguments 객체 생성\n 함수를 호출할 때 넘긴 인자들의 배열(유사배열, 정식 배열은 아니다) arguments -\u0026gt; [param1, param2]    스코프 정보 생성\n 컨텍스트의 유효 범위를 나타내는 스코프 정보 생성 특정 변수에 접근해야 할 경우, 이 스코프 리스트를 활용 현재 컨텍스트의 변수 뿐만 아니라, 상위 실행 컨텍스트의 변수도 접근 가능 [[scope]] -\u0026gt; [List]    변수 생성\nfunction(param1, param2){ var a=1, b=2; function internalFunc(){} //a,b, internalFunc()가 생성 (함수도 변수!)  }  현재 실행 컨텍스트 내부에서 사용되는 지역 변수를 생성 변수 or 내부 함수를 메모리에 생성하지만, 초기화는 해당 표현식이 실행되기 전까지 이루어지지 않는다.     this 바인딩\n this 키워드를 사용하는 값이 할당된다. this -\u0026gt; object    코드 실행\n 변수의 초기화 및 연산, 또 다른 함수 실행등이 이루어진다.    ","date":"2021-01-05T22:38:11+09:00","permalink":"https://yondo123.github.io/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/","title":"자바스크립트 실행 컨텍스트"}]