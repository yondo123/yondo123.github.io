[{"content":"펼침연산자란 기존 배열 조작(splice, slice..) 메소드들을 사용할 때, 원본배열을 조작할 수 있는 가능성이 있는데 이를 방지 (기존 컬렉션을 조작하지 않는다.)\n특히, 함수에서 배열을 조작할 때 부수효과 방지에 유용하다.\n사용법\n마침표 세 개(\u0026hellip;)를 이용해 작성할 수 있다.\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;]; const copyFruits = [...fruits]; //[\u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;] 펼침연산자를 이용한 복사 만일 배열의 원소를 삭제하려는 함수를 사용하려하려면, 단순하게 반복문을 돌려 삭제할 값과 비교후 일치하면 삭제후 return 배열에 push하는 방식으로 할 수 있다.\n기존 단순 반복문을 통한 복사\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;]; const newFruits = removeItem(fruits, \u0026#39;mango\u0026#39;); function removeItem(arr, item) { const resultArray = []; for (let i = 0; i \u0026lt; arr.length; i++) { if(arr[i] !== item){ resultArray.push(arr[i]); } } return resultArray; } console.log(fruits); //[\u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;] console.log(newFruits); //[\u0026#39;apple\u0026#39;] 이렇게 기존 배열에 영향을 주지도 않고, 원하는대로 삭제가 잘 이루어져있지만 펼침연산자를 이용해서 코드를 좀 더 줄일 수 있다.\nsplice 메소드로도 요소를 없앨 수 있지만, 원래의 배열의 요소를 삭제함으로 취지에 맞지 않는다.\n펼침연산자 사용\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;]; const newFruits = removeItem(fruits, \u0026#39;mango\u0026#39;); function removeItem(arr, item) { const index = arr.indexOf(item); return [...arr.slice(0, index), ...arr.slice(index+1)]; //해당 위치만큼 배열을 잘라 연결 시킨다. } console.log(newFruits); 펼침연산자를 사용함으로써, 가독성과 재사용성이 향상되었음을 알 수 있다.\n간편한 매개변수 전달 여러 인수를 매개변수로 담는 함수에서도 간편하게 전달할 수 있다.\nconst fruitInfo = [\u0026#39;apple\u0026#39;, \u0026#39;6000\u0026#39;]; function displayFruitInfo(name, price){ return `${name}: ${price}원`; } displayFruitInfo(fruitInfo[0], fruitInfo[1]) //기존 매개변수 displayFruitInfo(...fruitInfo); //펼침연산자 사용 push, shift 대체 push와 shift도 원본배열에 조작을 하는 데, 펼침연산자를 이용해 push와 shift 기능을 구현할 수 있다. push\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;]; const newFuruits = [...fruits, \u0026#39;banana\u0026#39;]; //[\u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;banana\u0026#39;] shift\nconst fruits = [\u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;]; const newFuruits = [\u0026#39;banana\u0026#39;, ...fruits]; ","date":"2021-01-29T22:49:38+09:00","permalink":"https://jinyisland.kr/p/%ED%8E%BC%EC%B9%A8%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0/","title":"펼침연산자 사용해보기"},{"content":"자바에서의 배열 다루기 주로 자바스크립트로 개발을 많이 해서 그런지 유연성이 다른 언어와 비교했을때 편하기도 했지만 Java에서의 배열을 마주쳤을 때 확실히 정리하고자 두 언어의 배열을 비교하고자 한다. 먼저 Java에서 배열은 다음과 같은 특징을 갖고 있다.\n 같은 타입이어야 한다. 한번 생성된 배열은 길이를 변경할 수 없다.  같은타입을 가지고 있어야 된다는 점에서 큰 혼란을 줄 수 있다. 왜냐하면 자바스크립트에서는 배열에 어떠한 타입을 다 포함시킬 수 있었기 때문이다.\n자바스크립트에서의 배열 다루기 자바스크립트에서는 다른 언어와(자바 포함) 비교하였을 때 더욱 유연하다.\n크기를 지정할 필요도 없고, 어느타입의 데이터를 어떤 위치에 넣어도 에러가 발생하지 않는다.\n 배열의 length는 실제 배열의 길이와 일치하진 않는다. 배열의 index는 배열의 길이에 맞추는 것이 아니라 가장 큰 index 기준으로 length 값이 정해진다. (실제 메모리가 늘어나는 것은 아니다.)  배열 생성 먼저 자바에서는 배열을 생성할 때 해당 배열에 들어갈 타입을 명시한다.\nint[] numberArray = new int[5]; 자바스크립트에서는 2가지 형태로 배열을 생성할 수 있다.\nnew생성자 함수로 배열 생성\nconst numberArray = new Array(); 변수 초기화로 배열 생성\nconst numberArray = [1,2,3,4,5]; 배열 초기화 자바에서는 배열의 길이내에서 요소를 추가할 수 있다.\n물론 arrayList와 같은 유틸을 사용하면 가변배열을 처리할 수 있지만 어디까지나 순수배열만 놓고봤을 때..\nint[] numberArray = new int[3]; int[0] = 1; int[1] = 2; int[2] = 3; int[4] = 4; //error! 생성과 동시에 초기화할 수 있다.\nint[] numberArray = new int[]{1,2,3,4}; 자바스크립트에서는 보다 유연성있게 처리할 수 있다.\n다음과 같은 배열을 index(3) ~ index(99) 까지 undefined가 삽입되어있다.\n또한 실제 배열의 길이는 실제 4개의 길이를 가지고 있지만, 가장 큰 index기준으로 잡혀있다.\nconst numberArray = []; numberArray.push(\u0026#39;1\u0026#39;); numberArray.push(function(){console.log(\u0026#39;hello\u0026#39;)}); numberArray.push(3); numberArray[100] = true; console.log(numberArray[5]); //undefined console.log(numberArray.length); //101 배열의 복사 배열을 복사하는 부분에 대해서는 두 언어 모두 이미 유용한 메소드가 존재한다.\n자바에서는 arraycopy() 메소드를 통해 복사가 가능하다.\nint[] array = new int[] {1,2,3,4}; int[] copyArray = new int[4]; System.arraycopy(array, 0, copyArray, 0, 4); 자바스크립트에서는 slice()메소드로 깊은 복사를 할 수 있다.\nconst array = [1,2,3,4,5]; const copyArray = array.slice(); ","date":"2021-01-17T21:51:37+09:00","permalink":"https://jinyisland.kr/p/java%EC%99%80-javascript-%EA%B0%84-%EB%B0%B0%EC%97%B4-%EB%B9%84%EA%B5%90/","title":"Java와 Javascript 간 배열 비교"},{"content":"JSP 기본객체    객체 내용     request / response 서버-클라이언트 간 요청 및 응답 정보   pageContext JSP페이지에 대한 정보   session 세션정보   application 웹 어클리케이션에 대한 정보   out JSP 페이지가 생성한 컨텐츠 내용을 출력   config JSP 페이지에 대한 설정 정보등을 저장   exception 에러페이지 처리    Rqeust\n클라이언트가 요청한 정보를 담고 있는 객체. IP, 요청 경로, 포트 번호 등 요청에 관한 값을 담고 있다.\n\u0026lt;p\u0026gt;IP : \u0026lt;%=request.getRemoteAddr() %\u0026gt; : \u0026lt;%=request.getServerPort() %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Url Path : \u0026lt;%=request.getRequestURI() %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;request type : \u0026lt;%=request.getMethod() %\u0026gt;\u0026lt;/p\u0026gt; 또한 페이지 간 요청 데이터를 처리할 때도 사용한다. getParameter()와 getParameterValues()로 얻어올 수 있으며, 차이점은 문자열로 받느냐 문자열 배열로 받느냐의 차이이다. (checkbox와 같은 다중 요청값을 받을 때 사용)\nString userName = request.getParameter(\u0026#34;user_name\u0026#34;); String userId = request.getParameter(\u0026#34;user_id\u0026#34;); String[] userHobby = request.getParameterValues(\u0026#34;user_hobby\u0026#34;); \u0026lt;%--String 배열로 받아야 한다.--\u0026gt; Response\nrequest 객체와 반대로 클라이언트에게 응답에 관한 객체이다. 리다이렉트, 헤더정보 입력에 주로 사용한다.\nOut\nout 객체는 기본적으로 JSP에서 담고있는 모든 내용을 out객체를 통해 전송한다. 서블릿 클래스에서 out 객체를 통해 html을 생성하는 원리\nConftig\nweb.xml에 공통적으로 사용하는 데이터를 명시하고 getInitParameter() 메소드를 이용해 가져올 수 있다. 해당 서블릿에서만 사용할 수 있다. (서블릿 매핑 필요)\n\u0026lt;servlet\u0026gt; \u0026lt;servlet-name\u0026gt;servletTest\u0026lt;/servlet-name\u0026gt; \u0026lt;jsp-file\u0026gt;/index.jsp\u0026lt;/jsp-file\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;dbaId\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;jsp-user\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;/servlet\u0026gt; \u0026lt;servlet-mapping\u0026gt; \u0026lt;servlet-name\u0026gt;servletTest\u0026lt;/servlet-name\u0026gt; \u0026lt;url-pattern\u0026gt;/index.jsp\u0026lt;/url-pattern\u0026gt; \u0026lt;/servlet-mapping\u0026gt; config.getInitParameter(\u0026#34;dbaId\u0026#34;); Application\n웹 어플리케이션 내부에 있는 전체 서블릿에서 사용할 수 있는 데이터등을 공유할 때 사용한다. web.xml에 context-param을 정의하고 getInitParameter()메소드를 통해 가져온다.\n\u0026lt;!--웹 속성 정의 --\u0026gt; \u0026lt;context-param\u0026gt; \u0026lt;param-name\u0026gt;dbmsInfo\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;oracle 11g\u0026lt;/param-value\u0026gt; \u0026lt;/context-param\u0026gt; String dbmsname = application.getInitParameter(\u0026#34;dbmsInfo\u0026#34;); Exception\n오류 관련 처리를 담당하는 객체, 웹 서버에서 오류가 발생하면 자체적으로 오류 페이지를 띄우는데 직접 구성할 수 있다.\n\u0026lt;%@ page language=\u0026#34;java\u0026#34; contentType=\u0026#34;text/html; charset=UTF-8\u0026#34; pageEncoding=\u0026#34;UTF-8\u0026#34;%\u0026gt; \u0026lt;%@page errorPage=\u0026#34;/common/error.jsp\u0026#34; %\u0026gt; \u0026lt;--오류 페이지 경로를 지정--\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Error Page Test\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;가짜 파라미터 : \u0026lt;%=request.getParameter(\u0026#34;error\u0026#34;).toUpperCase() %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;%@ page language=\u0026#34;java\u0026#34; contentType=\u0026#34;text/html; charset=UTF-8\u0026#34; pageEncoding=\u0026#34;UTF-8\u0026#34;%\u0026gt; \u0026lt;%@ page isErrorPage=\u0026#34;true\u0026#34; %\u0026gt; \u0026lt;!-- 에러페이지 설정 --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Error Page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Error!!\u0026lt;/h2\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;\u0026lt;%=exception.getClass().getName() %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2021-01-09T15:48:14+09:00","permalink":"https://jinyisland.kr/p/jsp-%EB%82%B4%EC%9E%A5-%EA%B0%9D%EC%B2%B4/","title":"JSP 내장 객체"},{"content":"JSP 처리 과정 JSP 페이지를 요청할 때는, JSP를 직접 실행하는 것이 아니라 자바소스로 변환 한뒤 컴파일하여 생성한 서블릿을 실행한다. 만약 요청 URL이 서블릿 클래스가 매핑되어있을 경우 , 즉시 request/response가 이루어지지만 해당 클래스(Servlet)이 없는 경우는 JSP 페이지에서 직접 JAVA 소스로 컴파일해 서블릿 클래스로 반환한다. 프로젝트 폴더 구성 웹 프로젝트를 생성하면 기본적인 디렉토리 구조는 아래와 같다.\n│ ├─src │ │ │ └─WebContent │ │ │ │ │ ├─META-INF │ │ MANIFEST.MF │ └─WEB-INF │ │ web.xml │ └─lib └─Servers src\n자바 소스를 다루는 디렉토리, 컴파일 해야할 java파일은 모두 이곳에 위치한다.\nWebContent\n실제 웹 컨텐츠 파일들이 존재하는 디렉토리\n META-IMF\n프로젝트를 JAR로 패키징 할 떄 일종의 설명서라고 볼 수 있는 MANIFEST.MF 파일이 위치해있다.  ","date":"2021-01-09T15:46:29+09:00","permalink":"https://jinyisland.kr/p/jsp-%EC%B2%98%EB%A6%AC%EA%B3%BC%EC%A0%95/","title":"JSP 처리과정"},{"content":"Javscript Timer  자바스크립트는 기본적으로 싱글 스레드로 동작한다.  자바스크립트 타이머는 비동기 이벤트 핸들러로 실행중인 핸들러가 없을 경우에만 동작하는 방식이다. (물론 브라우저의 처리 방식에 따라 다를 수 있다.) 즉, FIFO(선입선출) 형태로 메시지 큐에 전달된다음, 실행중인 블록이 없을 때 비로소 실행된다. 만약 이 과정에서, 타이머가 실행되기 전 코드 블록에서 다른 타이머나 지연 함수가 발생한다면, 그 시간만큼 지연된다.    (1) 타이머 생성과 제거  Window에 속한 메소드     Method Description     setTimeout(fn, delay) 일정 시간이 진행되면 전달받은 콜백을 실행시킨다.   clearTimeout(id) 해당 타이머(Timeout)를 취소한다. (단, 실행시키지 않은 상태)   setInterval(fn, delay) clearInterval()되지 않을 때까지, 일정 시간마다 주기적으로 콜백함수를 실행시키는 타이머를 생성한다.   clearInterval(id) 해당 타이머(Interval)를 취소한다. (단, 실행시키지 않은 상태)    (2) 싱글 스레드로 인한 타이머 지연  아래 코드를 보면, 3초뒤에 first 메시지를 담은 로그가 출력되길 예상했지만, 결과는 상반되게 명령문을 먼저 실행하고, 이후에 비로소 setTimeout() 코드가 실행된다. 이는, 인터페이스 이벤트나 타이머 같은 비동기 이벤트 처리용 핸들러들이 실행중인 핸들러가 없을 경우에만 실행된다는 특성 때문에 벌어지는 현상이다.  이러한 현상은 HTML5에서 정의된 웹워커 방식으로 해결할 수는 있다.    setTimeout(function name() { console.log(\u0026#39;first \u0026#39;+new Date().toUTCString()) }, 3000); for (let index = 0; index \u0026lt; 10; index++) { setTimeout(function () { console.log(\u0026#39;dump message\u0026#39;); }, 1000); } //result dump message dump message dump message dump message dump message dump message dump message dump message dump message dump message first Sat, 27 Jun 2020 09:11:42 GMT (3)타임아웃과 인터벌의 차이점  타이머 메소드에는 timeout과 interval 메소드가 있는데 둘 차이라면, 일정 시간마다 주기적으로 콜백을 실행하느냐 마냐의 차이이다. 물론, timeout만으로도 interval기능을 구현할 수 있다. (재귀방식)  setTimeout(funtion callback()(){ //code  setTimeout(callback(), 1000); }, 1000);  로직만 보았을때는 인터벌과 큰 차이는 없을 것 같지만, 지연 시간에서 차이가 발생한다. setTimeout()은 마지막 콜백의 실행과 상관없이 무조건 delay시간 후에 콜백을 실행하려고 시도할 것이다, \u0026ldquo;자바스크립트 타이머는 정확한 시간을 보장하지 않는다\u0026rdquo; 라는 것을 기억하자. 즉 interval()은 매 (delay)ms마다 발생하는 것이고, timeout()은 실행 후 (delay)ms으로 콜백을 예약하는 것이다. 지연된 시간만큼 시간 오차는 더욱 늘게 될 것이다.  그냥 마음편히 setInterval()을 사용하자 ㅎㅎ    (4) 정리  자바스크립트 엔진은 싱글 스레드로 작동한다. 비동기 핸들러들은 실행을 기다리며 Queue에 저장한다. (실행 가능할 때까지 대기) setTimeout()과 setInterval()은 이벤트 발생 빈도를 결정하는 방식에 근본적으로 차이가 있다.  참고자료  자바스크립트 닌자 비급 (John Resig 저)\n ","date":"2021-01-05T22:50:16+09:00","permalink":"https://jinyisland.kr/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%83%80%EC%9D%B4%EB%A8%B8/","title":"자바스크립트 타이머"},{"content":"스크롤 이벤트  마우스를 움직이면 스크롤 이벤트가 발생한다. x-value 는 마우스의 가로축, y-value는 문서의 세로축을 따른는 픽셀 window.scroll(x-value, y-value); window.scroll(options);   (1)문서의 상.하단으로 이동시키기  scrollTop() 메서드를 이용한다. $(\u0026#34;body\u0026#34;).scrollTop(0); //간혹 \u0026#39;body\u0026#39;가 먹히지 않는다면 전체 위임 $(\u0026#39;html, body\u0026#39;).scrollTop(0); //순수 자바스크립트 function goTop(){ document.documentElement.scrollTop = 0; }   (2) 새로고침시 스크롤 상단으로 이동하기 setTimeout(function () { scrollTop(0, 0); }, 100); (3) 무한 스크롤링 구현 $(document).ready(function () { for (var i = 0; i \u0026lt; 20; i++) { $(\u0026#39;\u0026lt;h1\u0026gt;Sample TextLine \u0026gt;\u0026gt; \u0026#39; + i + \u0026#39;\u0026lt;/h1\u0026gt;\u0026#39;).appendTo(\u0026#39;body\u0026#39;); } var callback = function () { return $(\u0026#34;\u0026lt;h1\u0026gt;Scroll Detect! create Text Line!!\u0026lt;/h1\u0026gt;\u0026#34;).appendTo(\u0026#39;body\u0026#39;); } $(window).scroll(function () { var scrollHeight = $(window).scrollTop() + $(window).height(); var documentHeight = $(document).height(); if (scrollHeight == documentHeight) { //스크롤 높이와 문서의 높이가 같을 때  callback(); } }); }); ","date":"2021-01-05T22:43:29+09:00","permalink":"https://jinyisland.kr/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%9D%B4%EB%B2%A4%ED%8A%B8/","title":"자바스크립트 스크롤 이벤트"},{"content":"실행 컨텍스트  실행 컨텍스트란 자바스크립트 내에서 실행 가능한 코드블록들이 실행되는 환경이라고 볼 수 있다. console.log(\u0026#39;global Context\u0026#39;); //전역 컨텍스트 function executeContext1(){ console.log(\u0026#39;context 1\u0026#39;); } function executeContext2(){ executeContext1() //context1 함수를 호출  console.log(\u0026#39;context 2\u0026#39;); } executeContext2(); //함수 단위로 실행되므로 context2를 먼저 실행  /*result globacl Context context 1 context 2 */   (1)함수 실행시 컨텍스트 생성 과정 function execute(param1, param2){ var a=1, b=2; function internalFunc(){ return a+b; } return internalFunc() + a, b; } execute(3,4);   활성 객체 생성\n 해당 컨텍스트에서 필요한정보를 담을 객체(매개변수, 사용자 정의 변수 및 객체)    arguments 객체 생성\n 함수를 호출할 때 넘긴 인자들의 배열(유사배열, 정식 배열은 아니다) arguments -\u0026gt; [param1, param2]    스코프 정보 생성\n 컨텍스트의 유효 범위를 나타내는 스코프 정보 생성 특정 변수에 접근해야 할 경우, 이 스코프 리스트를 활용 현재 컨텍스트의 변수 뿐만 아니라, 상위 실행 컨텍스트의 변수도 접근 가능 [[scope]] -\u0026gt; [List]    변수 생성\nfunction(param1, param2){ var a=1, b=2; function internalFunc(){} //a,b, internalFunc()가 생성 (함수도 변수!)  }  현재 실행 컨텍스트 내부에서 사용되는 지역 변수를 생성 변수 or 내부 함수를 메모리에 생성하지만, 초기화는 해당 표현식이 실행되기 전까지 이루어지지 않는다.     this 바인딩\n this 키워드를 사용하는 값이 할당된다. this -\u0026gt; object    코드 실행\n 변수의 초기화 및 연산, 또 다른 함수 실행등이 이루어진다.    ","date":"2021-01-05T22:38:11+09:00","permalink":"https://jinyisland.kr/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/","title":"자바스크립트 실행 컨텍스트"}]