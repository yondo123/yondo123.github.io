[{"content":"자바스크립트의 특징 나는 주로 자바스크립트를 이용해 개발을하는 것을 좋아한다.\n내 기준 가장 자신있는 언어이기도 하고, 배우면서 흥미로움을 느낀 프로그래밍 언어 중 하나였다.\n하지만 자바스크립트는 쓰면 쓸수록 헷갈리는 개념도 많고, 처음엔 만만하게 보였지만 깊이 들어갈수록 난해한..언어이기도 하다.. (아직도 어렵다 ㅠㅠ)😵\n자바스크립트에 대한 핵심적인 내용을 짚고 넘어가고자 해당 시리즈를 포스팅하기로 마음 먹었다! 첫 번째는 자바스크립트는 어떻게 동작할까?\n유연한 언어 자바스크립트에서의 타입 체크는 타 언어보다 굉장히 유연하고 느슨하다. 아래 예시를 보면 보통의 언어 같으면 컴파일 단계에서 들어오지 않은 값에 대해 오류를 내뿜어내지만, 자바스크립트에서는 일단 처리를 한다.\n제대로 타입체크를 하지 않으면 undefined(알 수 없음), NaN(숫자가 아님)등의 원치않는 값들이 런타임 단계에서 출력되기도 한다.\n이런 유연함과 느슨함이 장점이자 단점이 되는것이 개발자에게 자유를 보장하지만, 자칫 검증을 제대로 하지 않을 경우 그 책임도 개발자에게 발생한다.\nfunction add(a, b){ return a + b; } add(1, 2); //3 add(\u0026#39;1\u0026#39;+2); //\u0026#39;12\u0026#39; add(1); //NaN 객체와 함수가 핵심 자바스크립트의 거의 모든 것은 객체이다. 객체는 값의 속성을 나타내는 key와 속성을 표현하는 value로 구성되어 있다.\n객체는 리터럴 방식으로 생성하는 방식과, 생성자 방식으로 생성하는 방식이 있다.\nvar fruit = { name : \u0026#39;apple\u0026#39;, price : 1200 } var food = new Object(); food.name = \u0026#39;ramen\u0026#39;; food.price = 1500; //동적으로 추가 및 삭제도 가능하다. fruit.color = \u0026#39;red\u0026#39;; //fruit 객체에 color 속성 추가 delete(food.price); //food 객체의 price 속성 삭제 boolean, number, string, null, undefined타입을 제외한 나머지는 모두 객체로 구성되어 있다.\n심지어 함수도 객체이다. 일반적인 객체보다 더 많은 기능이 있는 객체 정도로 생각하면 된다.\ntypeof [1, 2, 3] //\u0026#34;object\u0026#34; typeof {name : \u0026#39;jiny\u0026#39;} //\u0026#34;object\u0026#34; typeof new Date() //\u0026#34;object\u0026#34; typeof funtion(){} // \u0026#34;function\u0026#34; 위의 예제를 보면 배열은 객체로 취급하는것을 알 수 있지만, 함수는 자료형 검사시 \u0026ldquo;function\u0026quot;으로 출력되기 때문에 객체로 자료형을 인식하지 않는다고 생각할 수 있다.\n하지만 함수도 엄연하게 객체로 취급받는다. 이유는 여러가지가 있지만 아래 2가지 핵심적인 이유가 있다.\n 함수도 변수에 할당 가능하다. 자바스크립트에서의 일반 객체Object처럼 취급할 수 있다. 함수에 사용자 정의 속성을 추가하는 것도 가능하다.  function log(msg){ return msg; } //함수 log에 속성 추가 log.author = \u0026#39;jiny\u0026#39;; log.execute = log(\u0026#39;hello\u0026#39;); console.log(log.author); //\u0026#39;jiny\u0026#39; console.log(log.execute); //\u0026#39;hello\u0026#39; 함수도 값으로 취급한다. 함수를 이용해 할 수 있는 것은 마치 객체를 이용해 할 수 있는 것과 같다. (이를 일급 객체라고 정의한다.)   리터럴 생성 마치 객체 리터럴 생성 방식과 유사하게 함수도 선언과 동시에 빠르게 작성할 수 있다.  function add(a,b){ return a + b; }  변수나 배열의 요소 혹은 객체의 속성에 할당할 수도 있다.  //변수에 할당 var add = function(a,b){ return a + b; } //객체 속성에 할당 var calculator = { add : add } //배열에도 할당 var sampleArray = [0, \u0026#39;1,\u0026#39;, add]  함수의 인자로 전달가능하고, 리턴값으로도 사용할 수 있다.  var success = function(){ console.log(\u0026#34;success\u0026#34;); } //add 함수에 success 함수를 3번째 인자로 넘기는 코드 function add(a, b, callback){ var result = a + b; if(!isNaN(result){ return callback() } } //함수 실행 add(1,2,success); 자바스크립트가 실행되는 과정 콜스택 자바스크립트에서는 실행 컨텍스트라는 콜스택 처리 방식으로 코드들을 실행한다.\n콜스택은 함수들을 호출(Call)하는 호출 정보들을 스택(Stack)에 차곡차곡 쌓여 있는 것을 의미한다.\n제일 나중에 올려져있는 스택부터 처리하기 때문에 선언한 코드들을 블록단위로 호출 스택에 쌓아놓고 하나씩 반환하면서 코드들을 실행한다.\nconsole.log(\u0026#34;global stack\u0026#34;); function firstExecute(){ console.log(\u0026#34;first!\u0026#34;); } function secondExecute(){ firstExecute() console.log(\u0026#34;second!\u0026#34;); } secondExecute(); /* global stack first! second! */ 위 코드를 콜스택 구조로 표현하자면 아래와 같다.\n설명을 하자면 먼저 유호범위 최상위에 있는 console.log 메서드 부터 스택에 삽입된다. 호출스택에 모두 쌓이고 실행을 시키는 것이아니라 스택에 쌓는 순간 해당 컨텍스트가 실행된다.\n실행이 끝나면 다시 콜스택에서 반환이 되면서 콜스택에 쌓인 컨텍스트를 모두 비워내게 되는것이다.\n실행 컨텍스트 그럼 좀 더 자세하게, 실행 컨텍스트에는 어떤일이 일어날까?\n먼저, 해당 실행 컨텍스트에서 사용할 매개변수나 정의한 변수들이 생성된다. 즉, 실행 컨텍스트를 수행하기 위한 사전 작업을 하는 것이다. (이는 자바스크립트 엔진 내부에서 일어난다.)\n그리고 arguement 객체를 생성하는데 이는 호출할 때 넘긴 인자들이 저장되어 있는 객체라고 보면 된다. (배열이지만 객체다!)\nfunction add(a, b){ //code } 그 다음, 현재 컨텍스트의 유효 범위를 나타내는 스코프 정보를 생성하는 작업을 하게된다.\n리스트 형태로 만들어지는데 이 스코프 리스트를 활용해 상위 컨텍스트의 변수에 접근하거나, 해당 컨텍스트의 변수에 접근할 수 있다.\n이 스코프 리스트는 서로 연결되어 있어 (해당 컨텍스트 범위에 없으면 상위 컨텍스트 범위에서 찾는다..)스코프 체인으로 불린다.\nvar number = 2; function add(a, b){ return a + b + number; } 해당 함수안에서 매개변수를 사용 할 수 있고, 스코프 체인을 통해 외부의 변수들도 사용할 수 있는 상태이다.\n이제 생성된 지역 변수가 변수 객체로 만들어진 후에 해당 코드 범위안에 있는 여러 계산실행이 이루어진다.\n만약 값이 할당되지 않았거나, 넘겨 받지 못했다면 undefined로 할당되어버린다.\nvar number = 2; function add(a, b){ var result = a + b + number; return result; } add(2,3); 그동안 얕게나마 알고 있는 이 중요한 개념들을 다시 책을 찾아보고 정리하느라 애먹었다..\n더 깊게 들어가면 끝도 없이 여러 개념들이 즐비하게 나온다..ㅠㅠ 이 장에서는 2가지만 기억하면 될 것 같다!\n1. 자바스크립트는 거의 모든 것들이 객체로 구성되어 있다. (심지어 함수까지도..)\n2. 자바스크립트 엔진은 콜스택 기반의 실행컨텍스트(Execution Context)를 생성하며 코드들을 실행한다.\n참고자료  모던웹을 위한 자바스크립트 + JQuery 입문 - 객체 (윤인성 저) MDN - typeof 인사이드 자바스크립트 - arguments 객체 및 실행 컨텍스트 (송형주, 고현준 저)  ","date":"2021-07-27T23:47:42+09:00","permalink":"https://jinyisland.kr/post/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%A0%EA%B9%8C/","title":"자바스크립트는 어떻게 동작할까?"},{"content":"윈도우에서 작업한 Vue 프로젝트를 mac 환경에서 확인하려던 중 git clone 후 프로젝트를 실행해보니 아래와 같은 에러가 나왔다.\n\u0026gt; vue-todo@0.1.0 serve /Users/sjchoi/Mydoc/02_Code/05_vue/vue-practice/vue-todo \u0026gt; vue-cli-service serve sh: vue-cli-service: command not found npm ERR! code ELIFECYCLE npm ERR! syscall spawn npm ERR! file sh npm ERR! errno ENOENT npm ERR! vue-todo@0.1.0 serve: `vue-cli-service serve` npm ERR! spawn ENOENT npm ERR! npm ERR! Failed at the vue-todo@0.1.0 serve script. npm ERR! This is probably not a problem with npm. There is likely additional logging output above. npm WARN Local package.json exists, but node_modules missing, did you mean to install? npm ERR! A complete log of this run can be found in: npm은 당연히 설치되어있는데 왜그러는지 몰라 한참을 찾아보다가 npm 캐시를 지워주면 된다는 말을 듣고 캐시를 지우고 다시 package.json에 정의된 모듈을 설치하였더니 잘 된다!\nnpm cache clean --force #npm 캐시 삭제 npm install #package.json 의존하는 모듈 설치 만약 npm install을 시행해도, 프로젝트 실행이 안된다면, npm run serve 중 필요한 라이브러리를 설치하라고 뜰테니 해당 라이브러리를 설치하고 시행하면 잘 된다.\n","date":"2021-07-18T23:09:02+09:00","permalink":"https://jinyisland.kr/post/vue-import/","title":"외부 Vue 프로젝트 불러오기"},{"content":"컴포넌트 개념 화면의 영역을 분리하여 개발하는 것, Vue에서 최상위 컴포넌트는 root이다.\n컴포넌트 구성의 장점은 요소들을 재사용함으로써 개발 생산성이 향상되고, 컴포넌트들은 서로 관계가 형성된다.\n전역 컴포넌트 주로 플러그인, 라이브러리 등 앱 전역에서 사용 할 공통 컴포넌트를 작성한다.\n전역 컴포넌트를 생성하면 새 인스턴스를 생성할 때 마다 기본적으로 생성한다.\n//컴포넌트 생성 Vue.component(\u0026#39;app-header\u0026#39;, { template: \u0026#39;\u0026lt;h1\u0026gt;header\u0026lt;/h1\u0026gt;\u0026#39; //component Template }); Vue.component(\u0026#39;app-content\u0026#39;, { template: \u0026#39;\u0026lt;p\u0026gt;This is Vue-Component Write\u0026lt;/p\u0026gt;\u0026#39; }); //인스턴스 생성 new Vue({ el: \u0026#39;#app\u0026#39; //selector }); 지역 컴포넌트 Vue 인스턴스 내에 직접 삽입하는 방식이다. components로 정의한다.\nTree 구조로 구성할 수 있으며, 부모-자식 간 컴포넌트 사이 통신이 가능하다.\n지역 컴포넌트는 해당 인스턴스에서만 동작한다. 따라서 인스턴스를 새로 생성할 때 마다 컴포넌트를 등록해주어야 한다.\nnew Vue({ el: \u0026#39;#app\u0026#39;, //selector  components: { //지역 컴포넌트 정의  \u0026#39;app-footer\u0026#39;: { template: \u0026#39;\u0026lt;footer\u0026gt;Footer!\u0026lt;/footer\u0026gt;\u0026#39; } } }); Template 템플릿 내에 생성한 컴포넌트를 태그로 지정한다.\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!--컴포넌트에 등록한 템플릿 지정--\u0026gt; \u0026lt;app-header\u0026gt;\u0026lt;/app-header\u0026gt; \u0026lt;app-content\u0026gt;\u0026lt;/app-content\u0026gt; \u0026lt;/div\u0026gt; 컴포넌트 통신 방식 Vue 컴포넌트는 각 고유한 데이터 유효범위를 갖는다.\n부모 컴포넌트의 데이터가 바뀌면 하위 컴포넌트의 데이터가 바뀌지만, 반대로 하위 컴포넌트의 데이터가 바뀌면 부모 컴포넌트가 바뀌지 않는다. (단방향 흐름)\nprops 상위 컴포넌트에서 하위 컴포넌트로 데이터 전달 시 사용한다.\nvue에서는 v-bind디렉티브로 속성에 접근할 수 있는데, 하위 컴포넌트에서 상위 컴포넌트의 데이터 속성에 접근이 가능하다.\n자세하게 말하면, v-bind로 해당 컴포넌트에서 정의된 props 속성에 접근할 수 있고 props의 역할은 부모의 data영역에 접근할 수 있게 해주는 속성이라고 볼 수 있다.\n\u0026lt;!--template--\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;app-header v-bind:propsdata=\u0026#34;message\u0026#34;\u0026gt;\u0026lt;/app-header\u0026gt; \u0026lt;/div\u0026gt; //하위 컴포넌트 var appHeader = { template: \u0026#39;\u0026lt;h1\u0026gt;header\u0026lt;/h1\u0026gt;\u0026#39;, props: [\u0026#39;propsdata\u0026#39;] } // Vue 인스턴스 (root 컴포넌트) new Vue({ el: \u0026#39;#app\u0026#39;, components: { \u0026#39;app-header\u0026#39;: appHeader }, data: { message: \u0026#39;hello Vue~~!!\u0026#39; } }); emit props와는 반대로 하위 컴포넌트에서 상위 컴포넌트로 이벤트를 전달할 수 있다.\n이벤트를 전달함으로써, 콜백내 this를 통해 상위 데이터에 접근하는 방법이다.\n컴포넌트 methods 속성 내에 여러 이벤트들을 정의할 수 있는데, 정의한 custom event를 트리거하려면 $emit메서드에 이벤트 이름을 전달하면 된다.\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;app-content v-on:add=\u0026#34;addNumber\u0026#34;\u0026gt;\u0026lt;/app-content\u0026gt; \u0026lt;p\u0026gt;number : {{number}}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; //하위 컴포넌트  const appContent = { template: \u0026#39;\u0026lt;button v-on:add=\u0026#34;addNumber\u0026#34;\u0026gt;add\u0026lt;/button\u0026gt;\u0026#39;, methods: { addNumber: function (params) { this.$emit(\u0026#39;add\u0026#39;); //상위 컴포넌트에 binding 할 이벤트  } } } //Vue 인스턴스 (root)  const vueObject = new Vue({ el: \u0026#39;#app\u0026#39;, components: { //local component  \u0026#39;app-content\u0026#39;: appContent }, methods: { addNumber: function () { //this 키워드로 정의한 data에 접근 가능  console.log(this.number++); } }, data: { number: 1 } }); 동등 컴포넌트 간 통신   내가 생각하는 컴포넌트 통신 실제로 기존 DOM 조작 방식(JQuery)에 익숙한 나는 위의 사진처럼 종속관계가 아니어도 값을 주고받을 수 있을줄 알았으나, 아래와 같이 해야한다고 한다.\n  실제 컴포넌트 통신 방법 위에 설명했던 컴포넌트의 특성을 살려 동등 레벨의 컴포넌트(부모가 동일한)가 데이터를 전달하려면, emit(상위 컴포넌트로 전달) -\u0026gt; props(하위 컴포넌트로 전달) 과정을 거쳐야 한다.\n  만일 같은 레벨의 header와 footer 사이 데이터 전달이 필요하다면 먼저 body에 데이터를 전달해야한다. ($emit)\n\u0026lt;div id=\u0026#34;body\u0026#34;\u0026gt; \u0026lt;app-header\u0026gt;\u0026lt;/app-header\u0026gt; \u0026lt;app-footer v-on:message=\u0026#34;bindData\u0026#34;\u0026gt;\u0026lt;/app-footer\u0026gt; \u0026lt;/div\u0026gt; //footer 컴포넌트 const footer = { template: \u0026#39;\u0026lt;div\u0026gt;\u0026lt;h3\u0026gt;FOOTER\u0026lt;/h3\u0026gt;\u0026lt;button v-on:click=\u0026#34;passData\u0026#34;\u0026gt;trans-data\u0026lt;/button\u0026gt;\u0026lt;/div\u0026gt;\u0026#39;, methods: { passData: function () { this.$emit(\u0026#39;message\u0026#39;, \u0026#39;footer-data\u0026#39;); //해당 이벤트에 파라미터 전달  } }, } new Vue({ el: \u0026#39;#body\u0026#39;, components: { \u0026#39;app-header\u0026#39;: header, \u0026#39;app-footer\u0026#39;: footer }, data: { message: \u0026#39;test\u0026#39; }, methods: { bindData: function (param) { this.message = param; } }, }); 이제 부모의 message는 하위 컴포넌트에서 전달한 데이터로 변경이 되어있다.\nprops속성을 통해 접근하면된다.\n\u0026lt;app-header v-bind:headerdata=\u0026#34;message\u0026#34;\u0026gt;\u0026lt;/app-header\u0026gt; //header 컴포넌트 const header = { template : \u0026#39;\u0026lt;h2\u0026gt;Header\u0026lt;/h2\u0026gt;\u0026#39;, props : [\u0026#39;headerdata\u0026#39;] } 참고자료  Vue 공식문서 - vm-emit 캡틴판교님의 Vue 기초 강의  ","date":"2021-07-01T21:27:40+09:00","permalink":"https://jinyisland.kr/post/vue-component/","title":"Vue 컴포넌트에 대한 개념"},{"content":"CLI? cli란 Command Line Interface, 즉 명령어 기반의 인터페이스 환경을 의미한다.\nvue 프로젝트 도입시 전체적인 웹애플레이케이션을 관리하려면 지금 소개하는 cli패키지를 설치하면 되고,\n별도의 페이지에서 국한적으로 사용하려면 cdn방식으로도 사용할 수 있다.\nCDN 방식을 사용하려면 아래 소스를 참고하면 된다.\n\u0026lt;head\u0026gt; \u0026lt;!-- Vue-CDN --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- template --\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;app-footer\u0026gt;\u0026lt;/app-footer\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script\u0026gt; //vue 인스턴스 생성  new Vue({ el: \u0026#39;#app\u0026#39;, components: { \u0026#39;app-footer\u0026#39; : { template : \u0026#39;\u0026lt;footer\u0026gt;Footer!\u0026lt;/footer\u0026gt;\u0026#39; } } }); \u0026lt;/script\u0026gt; Vue 설치하기 먼저 npm (node package manager) 및 node가 설치되어있어야 한다.\n특히 node 는 vue에서 10.X 버전 이상을 권장하기 때문에, 버전을 확인하고 10.X이상 버전을 준비하는 것이 필수이다.\nnode -v #현재 node 버전 확인 (LTS 10.X 버전 이상을 설치해야 한다.) npm -v #npm 버전 확인 npm install -g @vue/cli #vue-cli install Vue-cli 버전 별 프로젝트 생성 vue cli 버전마다 프로젝트 생성 방법이 조금 다르다.\n혹시 2.X 환경으로 vue를 생성해야 한다면, 직접 프로젝트 템플릿을 지정해주어야 한다.\n 2.X  vue-webpack-boilerplate : 대형 프로젝트 규모에 적합 (hot-reload, router, unit test, linting 포함) webpack-simple : 빠른 프로토타입 구축 목적에 적합 vue-simple-boilerplate : 하나의 html만 존재 (튜토리얼 수준에 적합)  # vue init \u0026#39;project-template-type\u0026#39; \u0026#39;project-directory\u0026#39; vue init webpack-simple vue-project  3.X~\n3버전 들어서 프로젝트 생성이 간편하게 되었다.\ncreate로 프로젝트 경로만 잡아주고 생성하고 직접 필요한 모듈을 선택해서 설치할 수 있다.\n물론 default로 필수 모듈(babel, linting)만 설치하고 필요한 모듈은 알아서 설치해도 상관없다. # vue create \u0026#39;project-directory\u0026#39; vue create vue-project   프로젝트 구조 vue 프로젝트 필수 구조\nroot ├─public │ └─index.html : 로컬 서버 실행시 제일 처음 참조되는 페이지 ├─src │ └─main.js : 프로젝트 전체에 대한 정보 (vue 인스턴스 생성) │ └─app.vue : 메인 컴포넌트 ├─package.json : 프로젝트 모듈 및 의존성 설정 정보  index.html\nwebpack을 통해 여러 컴포넌트 vue, 리소스들이 통합해 주입되는 페이지이다. 즉 페이지 내용이 변경될 때 마다 페이지를 reload하는 것이 아닌 변경된 요소만을 탐색해 내용을 변경한다.\nvue는 이러한 가상 DOM을 활용하기에 최적화된 framework이고 이러한 구조를 SPA (Single Page Application)라 한다. \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt;  main.js\n프로젝트에 대한 전체 정보를 담고 있는 main 스크립트 파일이다.\n최상위 인스턴스로써, 여러 컴포넌트들을 공유할 수 있고 상태state들을 관리한다. import App from \u0026#39;./App.vue\u0026#39;; //main component new Vue({ el: \u0026#39;#app\u0026#39;, render: h =\u0026gt; h(App) });  package.json\n프로젝트에서 사용중인 여러 모듈을 관리하는 곳이다.\n특히, devDependencies에서 프로젝트에서 사용중인 여러 플러그인들을 확인할 수 있다. (의존성 관리) \u0026#34;devDependencies\u0026#34;: { \u0026#34;@vue/cli-plugin-babel\u0026#34;: \u0026#34;~4.5.0\u0026#34;, \u0026#34;@vue/cli-plugin-eslint\u0026#34;: \u0026#34;~4.5.0\u0026#34;, \u0026#34;@vue/cli-service\u0026#34;: \u0026#34;~4.5.0\u0026#34;, \u0026#34;babel-eslint\u0026#34;: \u0026#34;^10.1.0\u0026#34;, \u0026#34;eslint\u0026#34;: \u0026#34;^6.7.2\u0026#34;, \u0026#34;eslint-plugin-vue\u0026#34;: \u0026#34;^6.2.2\u0026#34;, \u0026#34;vue-template-compiler\u0026#34;: \u0026#34;^2.6.11\u0026#34; }   ","date":"2021-06-30T20:20:49+09:00","permalink":"https://jinyisland.kr/post/vue-start/","title":"Vue 설치하기 및 프로젝트 구조"}]