[{"content":"CLI? cli란 Command Line Interface, 즉 명령어 기반의 인터페이스 환경을 의미한다.\nvue 프로젝트 도입시 전체적인 웹애플레이케이션을 관리하려면 지금 소개하는 cli패키지를 설치하면 되고,\n별도의 페이지에서 국한적으로 사용하려면 cdn방식으로도 사용할 수 있다.\nCDN 방식을 사용하려면 아래 소스를 참고하면 된다.\n\u0026lt;head\u0026gt; \u0026lt;!-- Vue-CDN --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- template --\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;app-footer\u0026gt;\u0026lt;/app-footer\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script\u0026gt; //vue 인스턴스 생성  new Vue({ el: \u0026#39;#app\u0026#39;, components: { \u0026#39;app-footer\u0026#39; : { template : \u0026#39;\u0026lt;footer\u0026gt;Footer!\u0026lt;/footer\u0026gt;\u0026#39; } } }); \u0026lt;/script\u0026gt; Vue 설치하기 먼저 npm (node package manager) 및 node가 설치되어있어야 한다.\n특히 node 는 vue에서 10.X 버전 이상을 권장하기 때문에, 버전을 확인하고 10.X이상 버전을 준비하는 것이 필수이다.\nnode -v #현재 node 버전 확인 (LTS 10.X 버전 이상을 설치해야 한다.) npm -v #npm 버전 확인 npm install -g @vue/cli #vue-cli install Vue-cli 버전 별 프로젝트 생성 vue cli 버전마다 프로젝트 생성 방법이 조금 다르다.\n혹시 2.X 환경으로 vue를 생성해야 한다면, 직접 프로젝트 템플릿을 지정해주어야 한다.\n 2.X  vue-webpack-boilerplate : 대형 프로젝트 규모에 적합 (hot-reload, router, unit test, linting 포함) webpack-simple : 빠른 프로토타입 구축 목적에 적합 vue-simple-boilerplate : 하나의 html만 존재 (튜토리얼 수준에 적합)  # vue init \u0026#39;project-template-type\u0026#39; \u0026#39;project-directory\u0026#39; vue init webpack-simple vue-project  3.X~\n3버전 들어서 프로젝트 생성이 간편하게 되었다.\ncreate로 프로젝트 경로만 잡아주고 생성하고 직접 필요한 모듈을 선택해서 설치할 수 있다.\n물론 default로 필수 모듈(babel, linting)만 설치하고 필요한 모듈은 알아서 설치해도 상관없다. # vue create \u0026#39;project-directory\u0026#39; vue create vue-project   프로젝트 구조 vue 프로젝트 필수 구조\nroot ├─public │ └─index.html : 로컬 서버 실행시 제일 처음 참조되는 페이지 ├─src │ └─main.js : 프로젝트 전체에 대한 정보 (vue 인스턴스 생성) │ └─app.vue : 메인 컴포넌트 ├─package.json : 프로젝트 모듈 및 의존성 설정 정보  index.html\nwebpack을 통해 여러 컴포넌트 vue, 리소스들이 통합해 주입되는 페이지이다. 즉 페이지 내용이 변경될 때 마다 페이지를 reload하는 것이 아닌 변경된 요소만을 탐색해 내용을 변경한다.\nvue는 이러한 가상 DOM을 활용하기에 최적화된 framework이고 이러한 구조를 SPA (Single Page Application)라 한다. \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt;  main.js\n프로젝트에 대한 전체 정보를 담고 있는 main 스크립트 파일이다.\n최상위 인스턴스로써, 여러 컴포넌트들을 공유할 수 있고 상태state들을 관리한다. import App from \u0026#39;./App.vue\u0026#39;; //main component new Vue({ el: \u0026#39;#app\u0026#39;, render: h =\u0026gt; h(App) });  package.json\n프로젝트에서 사용중인 여러 모듈을 관리하는 곳이다.\n특히, devDependencies에서 프로젝트에서 사용중인 여러 플러그인들을 확인할 수 있다. (의존성 관리) \u0026#34;devDependencies\u0026#34;: { \u0026#34;@vue/cli-plugin-babel\u0026#34;: \u0026#34;~4.5.0\u0026#34;, \u0026#34;@vue/cli-plugin-eslint\u0026#34;: \u0026#34;~4.5.0\u0026#34;, \u0026#34;@vue/cli-service\u0026#34;: \u0026#34;~4.5.0\u0026#34;, \u0026#34;babel-eslint\u0026#34;: \u0026#34;^10.1.0\u0026#34;, \u0026#34;eslint\u0026#34;: \u0026#34;^6.7.2\u0026#34;, \u0026#34;eslint-plugin-vue\u0026#34;: \u0026#34;^6.2.2\u0026#34;, \u0026#34;vue-template-compiler\u0026#34;: \u0026#34;^2.6.11\u0026#34; }   ","date":"2021-06-30T20:20:49+09:00","permalink":"https://jinyisland.kr/p/vue-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0-%EB%B0%8F-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0/","title":"Vue 설치하기 및 프로젝트 구조"}]