<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jiny Island.</title>
    <link>https://jinyisland.kr/post/</link>
    <description>Recent content in Posts on Jiny Island.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Jan 2021 22:49:38 +0900</lastBuildDate><atom:link href="https://jinyisland.kr/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>펼침연산자 사용해보기</title>
      <link>https://jinyisland.kr/p/%ED%8E%BC%EC%B9%A8%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0/</link>
      <pubDate>Fri, 29 Jan 2021 22:49:38 +0900</pubDate>
      
      <guid>https://jinyisland.kr/p/%ED%8E%BC%EC%B9%A8%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0/</guid>
      <description>펼침연산자란 기존 배열 조작(splice, slice..) 메소드들을 사용할 때, 원본배열을 조작할 수 있는 가능성이 있는데 이를 방지 (기존 컬렉션을 조작하지 않는다.)
특히, 함수에서 배열을 조작할 때 부수효과 방지에 유용하다.
사용법
마침표 세 개(&amp;hellip;)를 이용해 작성할 수 있다.
const fruits = [&amp;#39;apple&amp;#39;, &amp;#39;mango&amp;#39;]; const copyFruits = [...fruits]; //[&amp;#39;apple&amp;#39;, &amp;#39;mango&amp;#39;] 펼침연산자를 이용한 복사 만일 배열의 원소를 삭제하려는 함수를 사용하려하려면, 단순하게 반복문을 돌려 삭제할 값과 비교후 일치하면 삭제후 return 배열에 push하는 방식으로 할 수 있다.</description>
    </item>
    
    <item>
      <title>Java와 Javascript 간 배열 비교</title>
      <link>https://jinyisland.kr/p/java%EC%99%80-javascript-%EA%B0%84-%EB%B0%B0%EC%97%B4-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Sun, 17 Jan 2021 21:51:37 +0900</pubDate>
      
      <guid>https://jinyisland.kr/p/java%EC%99%80-javascript-%EA%B0%84-%EB%B0%B0%EC%97%B4-%EB%B9%84%EA%B5%90/</guid>
      <description>자바에서의 배열 다루기 주로 자바스크립트로 개발을 많이 해서 그런지 유연성이 다른 언어와 비교했을때 편하기도 했지만 Java에서의 배열을 마주쳤을 때 확실히 정리하고자 두 언어의 배열을 비교하고자 한다. 먼저 Java에서 배열은 다음과 같은 특징을 갖고 있다.
 같은 타입이어야 한다. 한번 생성된 배열은 길이를 변경할 수 없다.  같은타입을 가지고 있어야 된다는 점에서 큰 혼란을 줄 수 있다. 왜냐하면 자바스크립트에서는 배열에 어떠한 타입을 다 포함시킬 수 있었기 때문이다.
자바스크립트에서의 배열 다루기 자바스크립트에서는 다른 언어와(자바 포함) 비교하였을 때 더욱 유연하다.</description>
    </item>
    
    <item>
      <title>자바스크립트 타이머</title>
      <link>https://jinyisland.kr/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%83%80%EC%9D%B4%EB%A8%B8/</link>
      <pubDate>Tue, 05 Jan 2021 22:50:16 +0900</pubDate>
      
      <guid>https://jinyisland.kr/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%83%80%EC%9D%B4%EB%A8%B8/</guid>
      <description>Javscript Timer  자바스크립트는 기본적으로 싱글 스레드로 동작한다.  자바스크립트 타이머는 비동기 이벤트 핸들러로 실행중인 핸들러가 없을 경우에만 동작하는 방식이다. (물론 브라우저의 처리 방식에 따라 다를 수 있다.) 즉, FIFO(선입선출) 형태로 메시지 큐에 전달된다음, 실행중인 블록이 없을 때 비로소 실행된다. 만약 이 과정에서, 타이머가 실행되기 전 코드 블록에서 다른 타이머나 지연 함수가 발생한다면, 그 시간만큼 지연된다.    (1) 타이머 생성과 제거  Window에 속한 메소드     Method Description     setTimeout(fn, delay) 일정 시간이 진행되면 전달받은 콜백을 실행시킨다.</description>
    </item>
    
    <item>
      <title>자바스크립트 스크롤 이벤트</title>
      <link>https://jinyisland.kr/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%9D%B4%EB%B2%A4%ED%8A%B8/</link>
      <pubDate>Tue, 05 Jan 2021 22:43:29 +0900</pubDate>
      
      <guid>https://jinyisland.kr/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%9D%B4%EB%B2%A4%ED%8A%B8/</guid>
      <description>스크롤 이벤트  마우스를 움직이면 스크롤 이벤트가 발생한다. x-value 는 마우스의 가로축, y-value는 문서의 세로축을 따른는 픽셀 window.scroll(x-value, y-value); window.scroll(options);   (1)문서의 상.하단으로 이동시키기  scrollTop() 메서드를 이용한다. $(&amp;#34;body&amp;#34;).scrollTop(0); //간혹 &amp;#39;body&amp;#39;가 먹히지 않는다면 전체 위임 $(&amp;#39;html, body&amp;#39;).scrollTop(0); //순수 자바스크립트 function goTop(){ document.documentElement.scrollTop = 0; }   (2) 새로고침시 스크롤 상단으로 이동하기 setTimeout(function () { scrollTop(0, 0); }, 100); (3) 무한 스크롤링 구현 $(document).ready(function () { for (var i = 0; i &amp;lt; 20; i++) { $(&amp;#39;&amp;lt;h1&amp;gt;Sample TextLine &amp;gt;&amp;gt; &amp;#39; + i + &amp;#39;&amp;lt;/h1&amp;gt;&amp;#39;).</description>
    </item>
    
    <item>
      <title>자바스크립트 실행 컨텍스트</title>
      <link>https://jinyisland.kr/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/</link>
      <pubDate>Tue, 05 Jan 2021 22:38:11 +0900</pubDate>
      
      <guid>https://jinyisland.kr/p/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/</guid>
      <description>실행 컨텍스트  실행 컨텍스트란 자바스크립트 내에서 실행 가능한 코드블록들이 실행되는 환경이라고 볼 수 있다. console.log(&amp;#39;global Context&amp;#39;); //전역 컨텍스트 function executeContext1(){ console.log(&amp;#39;context 1&amp;#39;); } function executeContext2(){ executeContext1() //context1 함수를 호출  console.log(&amp;#39;context 2&amp;#39;); } executeContext2(); //함수 단위로 실행되므로 context2를 먼저 실행  /*result globacl Context context 1 context 2 */   (1)함수 실행시 컨텍스트 생성 과정 function execute(param1, param2){ var a=1, b=2; function internalFunc(){ return a+b; } return internalFunc() + a, b; } execute(3,4);   활성 객체 생성</description>
    </item>
    
  </channel>
</rss>
